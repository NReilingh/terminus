## This workflow is triggered on pushes to the master branch and on pull requests.
name: Terminus 3.x
on:
  push:
    ## We do not build and test on changes to 3.x. We only build and test on pull requests.
    ignore: [ '3.x' ]
    ## we only build and test on chagnes to branches that aren't master
    branches: [ '*' ]
    ## And we build for pull request creation and updates
  pull_request:
    branches: [ '*' ]


jobs:
  # Checkout in separate job because docker image is alpine based and checkout action doesn't work.
  checkout_build:
    runs-on: ubuntu-latest
    container:
      image: quay.io/pantheon-public/php-ci:v7.4
    name: Checkout & build Phar
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Save repo content as artifact
        uses: actions/upload-artifact@v3
        with:
          name: full-workspace
          path: ${{ github.workspace }}
      - name: Full Composer Install
        run: composer install
      - name: Validate Code
        run: composer code:lint
      - name: Bump version and push tag
        uses: jaumann/github-bumpversion-action@v0.0.7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: build
      - name: Phar Build
        run: |
          mkdir $HOME/box
          composer require humbug/box --working-dir=$HOME/box
          export PATH=~/box/vendor/bin:$PATH
          composer phar:build
      - name: Save terminus.phar as artifact
        uses: actions/upload-artifact@v3
        with:
          name: terminus-phar
          path: terminus.phar
          if-no-files-found: error

  functional:
    runs-on: ${{ matrix.operating-system }}
    name: Functional testing matrix - PHP ${{ matrix.php-versions }} on ${{ matrix.operating-system }}
    if: ${{ github.repository_owner == 'pantheon-systems' }}
    strategy:
      matrix:
        operating-system: [ 'macos-latest' ]
        php-versions: [ '7.4', '8.2' ]
      max-parallel: 1
    env:
      TERMINUS_TOKEN: ${{ secrets.TERMINUS_TOKEN }}
      TERMINUS_SITE: ${{ secrets.TERMINUS_SITE }}
      TERMINUS_ORG: ${{ secrets.TERMINUS_ORG }}
      TERMINUS_BASE_DIR: ${{ secrets.TERMINUS_BASE_DIR }}
      TERMINUS_PLUGINS_DIR: ${{ secrets.TERMINUS_PLUGINS_DIR }}
      TERMINUS_PLUGINS2_DIR: ${{ secrets.TERMINUS_PLUGINS2_DIR }}
      TERMINUS_DEPENDENCIES_BASE_DIR: ${{ secrets.TERMINUS_DEPENDENCIES_BASE_DIR }}
      TERMINUS_USER: ${{ secrets.TERMINUS_USER }}
    needs: [ checkout_build ]
    steps:
      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.TERMINUS_SITE_OWNER_SSH_PRIVATE_KEY }}
      - name: Setup PHP with PECL extension
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: gd, mbstring, zip, ssh2-1.3.1, pcov
          coverage: pcov
          ini-values: error_reporting=E_ALL
      - name: Download repo content from artifact
        uses: actions/download-artifact@v3
        with:
          name: full-workspace
      - name: Download terminus.phar as artifact
        uses: actions/download-artifact@v3
        with:
          name: terminus-phar
      - name: Install Composer Dependencies
        run: composer install --no-interaction --prefer-dist
      - name: Setup tmate session
        if: ${{ github.event.inputs.tmate_enabled == 1 }}
        uses: mxschmitt/action-tmate@v3
      - name: Functional Tests (short)
        if: ${{ github.event_name == 'push' || github.event_name == 'schedule' || github.event.inputs.functional_tests_group == 'all' }}
        run: composer test:short
      - name: Functional Tests (long)
        if: ${{ github.event_name == 'schedule' || github.event.inputs.functional_tests_group == 'all' }}
        run: composer test:long
      - name: Functional Tests (arbitrary group)
        if: ${{ github.event.inputs.functional_tests_group != '' && github.event.inputs.functional_tests_group != 'all' }}
        run: composer test:group -- ${{ github.event.inputs.functional_tests_group }}

      - name: Coverage Report
        run: composer coverage
      - name: Save coverage as artifact
        uses: actions/upload-artifact@v3
        with:
          name: CoverageReport
          path: docs/TestCoverage.md
      - name: Finish sesssion
        if: ${{ always() && github.event.inputs.tmate_enabled == 1 }}
        run: |
          while [ ! -f /tmp/finish ]
          do
            sleep 2
          done
          exit 0
